name: Build iStore OS 24.10 x86-alpha deepseek

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      lan_ip:
        description: '设置LAN IP地址'
        required: true
        default: '192.168.100.1'
      os_name:
        description: '设置系统名称'
        required: true
        default: 'iStoreOS'
      enable_wifi:
        description: '启用WiFi'
        required: true
        default: true
        type: boolean
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 16 * * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: .config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  WORK_DIR: /mnt/workdir
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        REPO_BRANCH: [istoreos-24.10]
        ARCHITECTURE: [x86-alpha]
      fail-fast: false

    steps:
    - name: 🛠️ 检出代码
      uses: actions/checkout@v4

    - name: ℹ️ 显示运行器信息
      run: |
        echo "=== CPU信息 ==="
        lscpu | grep -E 'Model name|Socket|Core|Thread'
        echo -e "\n=== 内存信息 ==="
        free -h
        echo -e "\n=== 磁盘信息 ==="
        df -hT ${{ env.WORK_DIR }}
        echo -e "\n=== 运行器型号 ==="
        [ -f /proc/device-tree/model ] && cat /proc/device-tree/model || echo "Unknown model"

    - name: ⚙️ 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo apt-get update -qq
        sudo apt-get install -qq $(cat $GITHUB_WORKSPACE/depends/ubuntu-22.04) \
          build-essential clang flex g++ gawk gcc-multilib gettext git libncurses5-dev \
          libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
        
        echo "=== 安装Python依赖 ==="
        python3 -m pip install --upgrade pip pyelftools

        echo "=== 清理系统空间 ==="
        sudo apt-get autoremove -qq --purge
        sudo rm -rf /usr/local/lib/android /usr/share/dotnet /var/lib/apt/lists/*

        echo "=== 准备编译目录 ==="
        sudo mkdir -p ${{ env.WORK_DIR }}
        sudo chown -R $USER:$USER ${{ env.WORK_DIR }}
        ln -sf ${{ env.WORK_DIR }} $GITHUB_WORKSPACE/openwrt

    - name: 📥 克隆源码
      working-directory: ${{ env.WORK_DIR }}
      run: |
        git clone --depth 1 --branch ${{ matrix.REPO_BRANCH }} ${{ env.REPO_URL }} openwrt
        cd openwrt
        git submodule update --init --recursive

    - name: 📦 缓存管理
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.WORK_DIR }}/openwrt/dl
          ${{ env.WORK_DIR }}/openwrt/ccache
        key: ${{ runner.os }}-${{ matrix.ARCHITECTURE }}-${{ hashFiles('${{ env.WORK_DIR }}/openwrt/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ARCHITECTURE }}-

    - name: 🔄 更新Feeds
      working-directory: ${{ env.WORK_DIR }}/openwrt
      run: |
        ./scripts/feeds clean
        [ -e $GITHUB_WORKSPACE/${{ env.FEEDS_CONF }} ] && cp $GITHUB_WORKSPACE/${{ env.FEEDS_CONF }} .
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: ⚙️ 应用自定义配置
      working-directory: ${{ env.WORK_DIR }}/openwrt
      run: |
        set -euxo pipefail
        
        # 应用基础配置
        [ -e $GITHUB_WORKSPACE/${{ env.CONFIG_FILE }} ] && cp $GITHUB_WORKSPACE/${{ env.CONFIG_FILE }} .
        
        # 设置网络参数
        sed -i "s/192\.168\.[0-9]*\.[0-9]*/${{ github.event.inputs.lan_ip }}/g" package/base-files/files/bin/config_generate
        sed -i "s/OpenWrt/${{ github.event.inputs.os_name }}/g" package/base-files/files/bin/config_generate
        
        # WiFi设置
        if ${{ github.event.inputs.enable_wifi }}; then
          sed -i 's/disabled=1/disabled=0/g' package/kernel/mac80211/files/lib/wifi/mac80211.sh
        fi
        
        # 应用自定义脚本
        [ -x $GITHUB_WORKSPACE/${{ env.DIY_P1_SH }} ] && $GITHUB_WORKSPACE/${{ env.DIY_P1_SH }}
        [ -x $GITHUB_WORKSPACE/${{ env.DIY_P2_SH }} ] && $GITHUB_WORKSPACE/${{ env.DIY_P2_SH }} ${{ matrix.ARCHITECTURE }}

    - name: 🚀 编译准备
      working-directory: ${{ env.WORK_DIR }}/openwrt
      run: |
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -delete

    - name: 🔨 编译固件
      working-directory: ${{ env.WORK_DIR }}/openwrt
      timeout-minutes: 180
      run: |
        echo "开始编译，使用 $(nproc) 线程..."
        make -j$(nproc) || { echo "首次编译失败，尝试单线程编译..."; make -j1 V=s; }

    - name: 📤 上传编译产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.ARCHITECTURE }}-${{ matrix.REPO_BRANCH }}-bin
        path: ${{ env.WORK_DIR }}/openwrt/bin

    - name: 🏷️ 创建发布版本
      if: success() && env.UPLOAD_RELEASE == 'true'
      id: create-release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ matrix.ARCHITECTURE }}-$(date +%Y%m%d)
        name: ${{ matrix.ARCHITECTURE }} Build $(date +%F)
        body: |
          **构建信息**
          - 架构: ${{ matrix.ARCHITECTURE }}
          - 分支: ${{ matrix.REPO_BRANCH }}
          - 编译时间: $(date +"%Y-%m-%d %H:%M:%S")
          - 默认IP: ${{ github.event.inputs.lan_ip }}
          - WiFi状态: ${{ github.event.inputs.enable_wifi && '启用' || '禁用' }}
        files: ${{ env.WORK_DIR }}/openwrt/bin/targets/**/*

    - name: 🧹 清理旧构建
      uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📡 SSH连接（调试用）
      if: ${{ github.event.inputs.ssh == 'true' }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 30